$(document).ready(function () {
    var importantdata = $('#important-data').text();
    var obj = JSON.parse(importantdata);
    var solrUrl = obj.solrUrl;
	var siteName = obj.siteName;
  
    var todayDate = new Date();
    var formatTodayDate = todayDate.getFullYear() + '-' + (todayDate.getMonth() + 1) + '-' + todayDate.getDate();
	
    let dateTxt = todayDate.setDate(todayDate.getDate() - 1);
    dateTxt = new Date(dateTxt);
    var yesterdayDate = dateTxt.getFullYear() + '-' + (dateTxt.getMonth() + 1) + '-' + dateTxt.getDate();
  
    var myDataUrl = `${solrUrl}/select?q=pageType%3AEvent&omitHeader=true&rows=1000&fq=siteName_s:` + siteName + "&sort=eventToDate desc";
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    var defaultGridImgPath = '/content/dam/sites/isb/images/events-grid01.jpg';
    var defaultListImgPath = '/content/dam/sites/isb/images/events-list01.jpg';
    var defaultButton = 'REGISTER';


    // Create session variables for filter options
    sessionStorage.setItem('tagValue', '');
    sessionStorage.setItem('eventLocation', '');
    sessionStorage.setItem('subTagValue', '');
    sessionStorage.setItem('eventFromDate', '');
    sessionStorage.setItem('eventToDate', '');
    sessionStorage.setItem('searchText', '');
  
    var params = '';

	const queryString = window.location.search;
	const urlParams = new URLSearchParams(queryString);
	let cat = urlParams.has('cat') ? urlParams.get('cat') : '';
	let subcat = urlParams.has('subcat') ? urlParams.get('subcat') : '';
	if(urlParams != null) {
		
		sessionStorage.setItem('tagValue', cat);
        sessionStorage.setItem('subTagValue', subcat);
		
		let tagValue = encodeURIComponent(sessionStorage.getItem('tagValue'));
	    let subTagValue = encodeURIComponent(sessionStorage.getItem('subTagValue'));
	
	    let param1 = (cat != '') ? `&fq=tagValue:"${cat}"` : '';
	    let param2 = (subcat != '') ? `&fq=subTagValue:"${subcat}"` : '';
	
	    params = param1 + param2;
	
	    $('.event-grid-list-row').html('');
	    myDataUrl = `${solrUrl}/select?q=pageType%3AEvent${params}&omitHeader=true&rows=100&fq=siteName_s:` + siteName + "&sort=eventToDate desc";
	}

    /**
     * Create options for filter
     */
    function generateOptions(arr, element) {
        // Remove Duplicate items
      let dataArr = arr.toString().split(',');
      var data = dataArr.filter(function (elem, index, self) {
        return index === self.indexOf(elem);
      });
  
      // Create option and insert to select tag
      for (let i = 0; i < data.length; i++) {
          if(i == 0  && data.length>1) {
            let allOption = `<option value="">All</option>`;
          	$('#pastevents .' + element).append(allOption);
          	$('#upcomingevents .' + element).append(allOption);
          }
        if (data[i] != '' && data[i] != undefined && data[i] != "null") {
          let maincategory = `<option value="${data[i]}">${data[i]}</option>`;
          $('#pastevents .' + element).append(maincategory);
          $('#upcomingevents .' + element).append(maincategory);
        }
      }
    }
  
      var docs = [];
    /**
     * ajax call to fetch the data from solr
     * @param myDataUrl page URL
     * @param isUpdateFilters true|false If true update select tag data
     */
    function ajaxCall(myDataUrl, isUpdateFilters) {
        console.log(myDataUrl);

      $.ajax({
        url: myDataUrl,
        type: "GET",
        success: function (searchresponse) {
            let rankCount = 1;
            let facultyrankCount = 1;
          var results = searchresponse['response'];
          docs = results['docs'];
  
          if (isUpdateFilters == true) {
  
            // Empty the options
            $('.location, .maincategory, .subcategory, .monthrange').find('option').remove().end().append('').val('');
  
  
            let categoryArr = [];
            let locationArr = [];
            let subCatergoryArr = [];
  
            let dates = [];
            for (let i = 0; i < docs.length; i++) {
			if(i == 0) {
                  let options = `<option value="">All</option>`;
                  $('#pastevents .monthrange.selectpicker').append(options);
                  $('#upcomingevents .monthrange.selectpicker').append(options);
          	  }
              categoryArr.push(docs[i].tagValue);
              locationArr.push(docs[i].eventLocation);
              subCatergoryArr.push(docs[i].subTagValue);
  
              // populate months
              if (typeof docs[i].eventFromDate && typeof docs[i].eventToDate !== "undefined") {
                let fromdate = new Date(docs[i].eventFromDate.toString());
                let todate = new Date(docs[i].eventToDate.toString());
                todayDate.getFullYear() + '-' + (todayDate.getMonth() + 1) + '-' + todayDate.getDate();
  
                var fromDateFormat = new Date(fromdate.getFullYear(), fromdate.getMonth(), 1);
  
                let fromDay = fromDateFormat.getFullYear() + '-' + (fromDateFormat.getMonth() + 1) + '-' + fromDateFormat.getDate();
  
                var toDateFormat = new Date(todate.getFullYear(), todate.getMonth() + 1, 0);
                let toDay = toDateFormat.getFullYear() + '-' + (toDateFormat.getMonth() + 1) + '-' + toDateFormat.getDate();
  
                let fromMonth = monthNames[fromdate.getMonth()];
                let toMonth = monthNames[todate.getMonth()];
  
                let dateValue = fromMonth + ' - ' + toMonth;
                let dateIndex = fromDay + 'T00:00:00Z TO ' + toDay + 'T00:00:00Z';
  
                var found = $.inArray(dateValue, dates);
                if (found >= 0) {
                    // Duplicate data
                } else {
                  dates.push(dateValue);
                  let options = `<option value="${dateIndex}">${dateValue}</option>`;
                  $('#pastevents .monthrange.selectpicker').append(options);
                  $('#upcomingevents .monthrange.selectpicker').append(options);
                }
              }
  
            }
  
            generateOptions(locationArr, 'location.selectpicker');
            generateOptions(categoryArr, 'maincategory.selectpicker');
            generateOptions(subCatergoryArr, 'subcategory.selectpicker');
  
            $(".selectpicker").selectpicker("refresh");
          }
  
          /**
           * Page Template
           */
          const htmlTemplate = `${docs.map(item => `<div class="card-2 events-card blogcard-count">
              <figure>
                  <img class="img-responsive switched-grid" src="${item.gridImage ? `${item.gridImage}` : defaultGridImgPath }" alt="${item.imageAltText ? item.imageAltText : ''}" width="100%">
                  <img class="img-responsive switched-list" src="${item.listImage ? `${item.listImage}` : defaultListImgPath }" alt="${item.imageAltText ? item.imageAltText : ''}" width="100%">
              </figure>
              <div class="card-detail">
                  <div class="card-header-grid-list">
                  <div class="inner-header">
					${item.subTagValue ? `<h6>${item.subTagValue}</h6>` : ''}
                    <h3><a href="${item.url}" class="get-ranks" data-isb-search-info='{"rank":"${rankCount++}", "linkUrl":"${item.url}", "category": "${item.subTagValue ? item.subTagValue : '' }", "resultType":"${item.title ? item.title : ''}"}'>${(item.title ? item.title : (item.eventTitle ? item.eventTitle : ''))}</a></h3>
                    <h4>${(item.description ? item.description : (item.eventDescription ? item.eventDescription : ''))}</h4>
                  </div>
                  <div class="card-footer hidden">
                      <a href="${item.externalUrl ? item.externalUrl : '#'}" class="buttton sm blue">${item.buttonName ? `${item.buttonName}` : defaultButton }</a>
                      <span>${item.eventType ? item.eventType : ''}</span>
                  </div>
                  </div>
                  <div class="time-location">
                  <div class="date-time">
                      <div class="date">
                      <p class="header">Date:</p>
                      <p>${item.eventFromDate ? dateSuffixRules(new Date(item.eventFromDate).getDate()) : ''} ${item.eventFromDate ? monthNames[new Date(item.eventFromDate).getMonth()] + ', ' : ''} ${item.eventFromDate ? new Date(item.eventFromDate).getFullYear() : ''} <br>- ${item.eventToDate ? dateSuffixRules(new Date(item.eventToDate).getDate()) : ''} ${item.eventToDate ? monthNames[new Date(item.eventToDate).getMonth()] + ', ' : ''} ${item.eventToDate ? new Date(item.eventToDate).getFullYear() : ''}</p>
                      </div>
                      <div class="time">
                      <p class="header">Time:</p>
                      <p>${item.eventFromTime ? new Date(item.eventFromTime).getHours() + ' : ' : ''}${item.eventFromTime ? getFullMinutes(new Date(item.eventFromTime).getMinutes()) : ''} - ${item.eventToTime ? new Date(item.eventToTime).getHours()  + ' : ' : ''} ${item.eventToTime ? getFullMinutes(new Date(item.eventToTime).getMinutes()) : ''}</p>
                      </div>
                  </div>
                  <div class="events-venue">
                      <div class="location">
                          <p>${(item.locationName ? item.locationName : (item.locationTitle ? item.locationTitle : ''))}</p>
                      <p class="place">${item.eventLocation ? item.eventLocation : ''}</p>
                      </div>
                      <div class="add-calendar">
                      <p class="place">
                          <a href="#" class="add-to-calendar-events" data-value="${item.id}">
                              <img class="img-responsive" src="${item.eventCalenderIcon}" width="20px" height="20px" alt="${item.eventCalendarAltText ? item.eventCalendarAltText : ''}">
                              <span>${item.eventCalendarHeading ? item.eventCalendarHeading : ''}</span>
                          </a>
                      </p>
                      </div>
                  </div>
                  </div>
                  <div class="card-footer switched-off">
                      <a href="${item.externalUrl ? item.externalUrl : '#'}" data-toggle="modal"  class="buttton sm blue get-ranks" data-isb-search-info='{"rank":"${rankCount++}", "category": "", "resultType": "", "linkUrl":"${item.externalUrl}"}'>${item.buttonName ? `${item.buttonName}` : defaultButton }</a>
                  <span>${item.eventType ? item.eventType : ''}</span>
                  </div>
              </div>
              </div>`).join('')}`;

  
          if(htmlTemplate !== '') {
              $('.event-grid-list-row').append(htmlTemplate);
              $('.listing-grid').show();
          } else {
              const htmlTemplate = `<div class="acc-text text-center">Please refine your search!</div>`;
              $('.event-grid-list-row').append(htmlTemplate);
              $('.listing-grid').hide();
          }
  
          setTimeout(function(){ 
            $('#pastevents-slider').removeClass('slick-initialized');
            $('#upcomingevents-slider').removeClass('slick-initialized');
            // paginationScript(); 

            eventsPaginationScript('#pastevents-slider');
            eventsPaginationScript('#upcomingevents-slider'); 
          }, 100);
  
        	var type = "Event Listing";
            let searchText = sessionStorage.getItem('searchText');
            var term = searchText;
            var eventGridDetailsArr = [];
            let resultCount = results.numFound;
            let tagValue = sessionStorage.getItem('tagValue') === '' ? 'All':sessionStorage.getItem('tagValue');
            let eventLocation = sessionStorage.getItem('eventLocation') === '' ? 'All':sessionStorage.getItem('eventLocation');
            let subTagValue = sessionStorage.getItem('subTagValue') === '' ? 'All':sessionStorage.getItem('subTagValue');
            let eventFromTime = sessionStorage.getItem('eventFromTime') === '' ? 'All':sessionStorage.getItem('eventFromTime');
            let eventDate = sessionStorage.getItem('eventDate') === '' ? 'All':sessionStorage.getItem('eventDate');
            eventGridDetailsArr.push(tagValue, eventLocation, subTagValue, eventFromTime, eventDate);
            let filters = eventGridDetailsArr.join("|");
            makeSearchAACall(type, '', term, resultCount, filters);
  
        },
        error: function (e) {
            var serverDownMessage = obj.serverDownMessage;
            $('.event-grid-list-row').append(serverDownMessage);
            $('.listing-grid').hide();
            $('.pagi-cta').hide();
          console.log(`Error ${e}`);
          sendFormErrorToAnalytics(e);
        }
      });
    }
  
    function filterItems() {
      let tagValue = encodeURIComponent(sessionStorage.getItem('tagValue'));
      let eventLocation = encodeURIComponent(sessionStorage.getItem('eventLocation'));
      let subTagValue = encodeURIComponent(sessionStorage.getItem('subTagValue'));
      let eventFromDate = sessionStorage.getItem('eventFromDate');
      let eventToDate = sessionStorage.getItem('eventToDate');
      let searchText = sessionStorage.getItem('searchText');

      let param1 = (tagValue != '') ? `&fq=tagValue:"${tagValue}"` : '';
      let param2 = (eventLocation != '') ? `&fq=eventLocation:"${eventLocation}"` : '';
      let param3 = (subTagValue != '') ? `&fq=subTagValue:"${subTagValue}"` : '';
      let param4 = (eventFromDate != '') ? `&fq=eventFromDate:${eventFromDate}` : '';
      let param5 = (eventToDate != '') ? `&fq=eventToDate:${eventToDate}` : '';
      let param6 = (searchText != '') ? `&fq=*${searchText}*` : '';

      params = param1 + param2 + param3 + param4 + param5 + param6;

      $('.event-grid-list-row').html('');
      myDataUrl = `${solrUrl}/select?q=pageType%3AEvent${params}&omitHeader=true&rows=100&fq=siteName_s:` + siteName + "&sort=eventToDate desc";
      ajaxCall(myDataUrl, false);
    }

    /**
     * Filter option
     */
    $('#pastevents select, #upcomingevents select').on('change', function (e) {
  
      sessionStorage.setItem(this.name, this.value);

      if(this.name == 'eventDate') {
          if (this.value.indexOf(':') > 1) {
              sessionStorage.setItem('eventFromDate', '[' + this.value + ']');
              sessionStorage.setItem('eventToDate', '[' + this.value + ']');
          } else {
              sessionStorage.setItem('eventFromDate', '');
              sessionStorage.setItem('eventToDate', '');
          }
      }
      filterItems();
    });
  
    /**
     * Upcoming events
     */
    $('.tab-0').click(function () {
      $('.event-grid-list-row').html('');
        myDataUrl =`${solrUrl}/select?fq=eventFromDate%3A%5B${formatTodayDate}T00%3A00%3A00Z%20TO%20*%5D&q=pageType%3AEvent&omitHeader=true&rows=100&fq=siteName_s:` + siteName + "&sort=eventToDate desc";
        ajaxCall(myDataUrl, true);
    });
  
    /**
     * Past events
     */
    $('.tab-1').click(function () {
      $('.event-grid-list-row').html('');
        myDataUrl = `${solrUrl}/select?fq=eventFromDate%3A%5B*%20TO%20${yesterdayDate}T00%3A00%3A00Z%5D&q=pageType%3AEvent&omitHeader=true&rows=100&fq=siteName_s:` + siteName + "&sort=eventToDate desc";
        ajaxCall(myDataUrl, true);
    });
  	
	
	// Load data
    ajaxCall(myDataUrl, true);
  
      // function to get date with suffix
      function dateSuffixRules(i) {
      var j = i % 10,
          k = i % 100;
      if (j == 1 && k != 11) {
          return i + "st";
      }
      if (j == 2 && k != 12) {
          return i + "nd";
      }
      if (j == 3 && k != 13) {
          return i + "rd";
      }
      return i + "th";
  }
  
      //function to fetch full minutes
      function getFullMinutes(i) {
		if (i < 10) {
			return '0' + i;
		}
		return i;
      }


      $(document).on('click', '.add-to-calendar-events', function(){
  
          var i = $(this).attr('data-value');
          var docsData = $.grep(docs, function(data){
                return data.id == i;
          });
  
          let eventData = docsData[0];  
          let eventTime = docsData[0];
  
          let fromDate = eventData.eventFromDate[0];
          let toDate = eventData.eventToDate[0]; 
          let fromTime = eventData.eventFromTime[0];
          let toTime = eventData.eventToTime[0]; 
  
          fromDate = new Date(fromDate);
          fromTime = new Date(fromTime);
  
          toDate = new Date(toDate);
          toTime = new Date(toTime);
  
          var eventFromDate = new Date(fromDate.getFullYear(), fromDate.getMonth(), fromDate.getDate(), fromTime.getHours(), fromTime.getMinutes())
          var eventToDate = new Date(toDate.getFullYear(), toDate.getMonth(), toDate.getDate(), toTime.getHours(), toTime.getMinutes())
  
          let cal_single = ics();
		  
		  let title = (eventData.title ? eventData.title[0] : (eventData.eventTitle ? eventData.eventTitle[0] : ''));
          let description = (eventData.description ? eventData.description[0] : (eventData.eventDescription ? eventData.eventDescription[0]: ''));
  
          cal_single.addEvent(title, description, eventData.eventLocation[0], eventFromDate, eventToDate);
          cal_single.download(title);
      });

    /**
     * Search option
     */
    $('.search').keypress(function (event) {
      sessionStorage.setItem('searchText', '');
  
      var keycode = (event.keyCode ? event.keyCode : event.which);
  
      if (keycode == '13') {
        event.preventDefault();
        var searchText = $(this).val().trim();
        if (searchText.length >= 3 || searchText.length == 0) {
          sessionStorage.setItem('searchText', searchText);
          filterItems();
        }
      }
    });
    });